- NetworkPolicies are an application-centric construct which allow you to specify how a pod is allowed to communicate with various network "entities" (we use the word "entity" here to avoid overloading the more common terms such as "endpoints" and "services", which have specific Kubernetes connotations) over the network.

- components:
	- podSelector: select pods by labels that will be applied NetworkPolicies

	- policyTypes:
		- Ingress: policy for incoming traffic -> By default, a pod is non-isolated for ingress; all inbound connections are allowed
			Template:
			
				ingress:
				  - from:
				      - <from selectors>
				    ports:
				      - protocol: TCP/UDP/SCTP
				        port: xxx


		- Egress: policy for outgoing traffic -> By default, a pod is non-isolated for egress; all outbound connections are allowed
			Template:

				egress:
				  - to:
				      - <to selectors>
				    ports:
				      - protocol: TCP/UDP/SCTP
				        port: xxx



	- 4 kinds of "to" and "from" selectors
		- podSelector: select pods by labels

		- namespaceSelector: select namespace by labels

		- ipBlock: select particular IP CIDR ranges to allow as ingress sources or egress destinations.

		- namespaceSelector & podSelector: selects particular Pods within particular namespaces


- template

	apiVersion: networking.k8s.io/v1
	kind: NetworkPolicy
	metadata:
	  name: my-network-policy
	  namespace: default
	spec:
	  podSelector: 
	    matchLabels:
	      role: db
	  policyTypes:
	    - Ingress
	    - Egress
	  ingress:
	    - from:
	        - ipBlock:
	            cidr: 172.17.0.0/16    #allow ip range
	            except:
	              - 172.17.1.0/24
	        - namespaceSelector:
	            matchLabels:
	              project: myproject
	        - podSelector:
	            matchLabels:
	              role: backend
	      ports:
	        - protocol: TCP
	          port: 6379
	  egress:
	    - to:
	        - ipBlock:
	            cidr: 10.0.0.0/24    #allow ip range
	      ports:
	        - protocol: TCP
	          port: 5978




basic commands:
	kubectl create -f my-network-policy.yaml


	kubectl get networkpolicies
	kubectl get netpol

	kubectl describe netpol <netpol-name>









