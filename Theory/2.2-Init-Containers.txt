Init Containers:
- In a multi-container pod, each container is expected to run a process that stays alive as long as the POD's lifecycle.

- But at times you may want to run a process that runs to completion in a container. For example a process that pulls a code or binary from a repository that will be used by the main web application. That is a task that will be run only one time when the pod is first created. Or a process that waits for an external service or database to be up before the actual application starts. 

=> That's where initContainers comes in.

- When a POD is first created the initContainer is run, and the process in the initContainer must run to a completion before the real container hosting the application starts.

- You can configure multiple such initContainers as well, like how we did for multi-pod containers. In that case each init container is run one at a time in sequential order.

- If any of the initContainers fail to complete, Kubernetes restarts the Pod repeatedly until the Init Container succeeds.


- template:

		apiVersion: v1
		kind: Pod
		metadata:
		  name: myapp-pod
		  labels:
		    app: myapp
		    type: mypod-type
		  annotations:              #optional
		    buildversion: v1
		spec:
		  containers:
		  - name: mypod-container
		    image: xxx

		  initContainers:
		  - name: init-myservice
		    image: busybox:1.28
		    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']
		  - name: init-mydb
		    image: busybox:1.28
		    command: ['sh', '-c', 'until nslookup mydb; do echo waiting for mydb; sleep 2; done;']


https://kubernetes.io/docs/concepts/workloads/pods/init-containers/



















		      