Secrets:
	- types:
		- docker-registry: secret for use with a Docker registry
  		- generic: secret from a local file, directory, or literal value
  		- tls: TLS secret

  	- The way kubernetes handles secrets:
		- A secret is only sent to a node if a pod on that node requires it.
		- Kubelet stores the secret into a tmpfs so that the secret is not written to disk storage.
		- Once the Pod that depends on the secret is deleted, kubelet will delete its local copy of the secret data as well.

	=> There are other better ways of handling sensitive data like passwords in Kubernetes, such as using tools like Helm Secrets, HashiCorp Vault.

	- NOTEs:
		- Secrets are not Encrypted. Only encoded => so it is not safer in that sense.
		 	=> do not check-in secret objects to git along with code
		- Secret are note Encrypted in ETCD by default
			=> we should enable encryption at rest (https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)
		- Anyone able to create pods/deployments in the same namespace can access the secrets
			=> config least-privilege access to Secrets - RBAC
		- Consider 3rd-party secret store providers: AWS provider, Azure Provider, GCP Provider, Vault Provider

	

	- template:

		apiVersion: v1
		kind: Secret
		metadata:
		  name: myapp-secret
		data:
		  DB_USER: cm9vdA==
		  DB_PASS: cm9vdF9wYXNz


	ex:
		echo -n "root" | base64
			cm9vdA==
		echo -n "root_pass" | base64
			cm9vdF9wYXNz

		echo -n "cm9vdA==" | base64 --decode
		echo -n "cm9vdF9wYXNz" | base64 --decode




basic commands:
	kubectl create secret generic <secret-name>	\
	--from-literal=<key1>=<value1> \
	--from-literal=<key2>=<value2> 


	kubectl create secret generic <secret-name> \
	--from-file=<path-to-file>

		ex: app_secret.properties
			DB_USER: root
			DB_PASS: root_pass


	- Create TLS secret:
	kubectl --namespace=<namespace-name> create secret tls <secret-tls-name> --cert "path/to/tls.crt" --key "path/to/tls.key"

	


	kubectl create -f my-secret.yaml

	kubectl get secrets
	kubectl get secret myapp-secret - o yaml

	kubectl describe secret myapp-secret





- Inject into pods:

	apiVersion: v1
	kind: Pod
	metadata:
	  name: myapp-pod
	  labels:
	    app: myapp
	    type: mypod-type
	spec:
	  containers:
	  - name: mypod-container
	    image: xxx
	  
	    #Inject all keys-values from myapp-secret
	    envFrom:
	      - secretRef:
	          name: myapp-secret

	    #Inject single env from myapp-secret
	    env:  
	      - name: DB_PASS
	        valueFrom:
	          secretMapKeyRef:
	            name: myapp-secret
	            key: DB_PASS

	    #Inject all keys-values from configmap file
	    volumeMounts:
	      - name: app-secret-volume
	        readOnly: true
	        mountPath: /path/to/mountpoint


	  #Inject all keys-values from file
	  volumes:
	    - name: app-secret-volume
	      secret:
	        secretName: myapp-secret









