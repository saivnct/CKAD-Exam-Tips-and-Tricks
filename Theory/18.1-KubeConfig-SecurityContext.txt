KubeConfig (Security Context)

kubectl get pods
	--server my-kube-playground:6443
	--client-key admin.key
	--client-certificate admin.crt
	--certificate-authority ca.crt

	=> typing this is tedious task => we move authen info to config file

kubectl get pods --kubeconfig /path/to/mykube-config-file

	
kubectl get pods --as <user-name>


- get help
 kubectl config -h


- default config file: $HOME/.kube/config
	=> if our config file is located here, we dont need to specify --kubeconfig

- view config:
	kubectl config view
	kubectl config view --kubeconfig /path/to/mykube-config-file

- change default context:
	kubectl config use-context <context-name> --kubeconfig /path/to/mykube-config-file

- change default config file (so that we dont need to set --kubeconfig in every kubectl command):
	mv /path/to/mykube-config-file $HOME/.kube/config


- KubeConfig File sections:
	- clusters: various k8s clusters that we need to access to 
		ex: Dev, Prod, Google, AWS, ...
	
	- users: user accounts that have access to these clusters
		ex: admin, dev user, prod user, ...
		- these users may have different privileges on different clusters

	- context: define which user account will be used to access which cluster
		ex:
			- admin@Prod => use admin account to access Prod cluster
			- dev@Google => use dev account to access Google cluster

- Template:

	apiVersion: v1
	kind: Config
	current-context: my-kube-dev@my-dev-cluster    # default context
	clusters:
	- name: my-prod-cluster
	  cluster:
	    certificate-authority:
	    server: https://my-prod-cluster:6443
	    namespace: my-namespace    #if we want set default namespace
	- name: my-dev-cluster
	  cluster:
	    certificate-authority: path/to/ca.crt
	    server: https://my-dev-cluster:6443  
	- .....

	contexts:
	- name: my-kube-admin@my-prod-cluster
	  context:
	    cluster: my-prod-cluster
	    user: my-kube-admin
	- name: my-kube-dev@my-dev-cluster
	  context:
	    cluster: my-dev-cluster
	    user: my-kube-dev
	- ....

	users:
	- name: my-kube-admin
	  user:
	    client-certificate: path/to/admin.crt
	    client-key: path/to/admin.key
	- name: my-kube-dev
	  user:
	    client-certificate: path/to/dev.crt
	    client-key: path/to/dev.key
	- .....


	=> we not deploy as normal k8s object, we just save to disk path/to/mykube-config-file









